// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using jp_backend.Database;

#nullable disable

namespace jp_backend.Migrations
{
    [DbContext(typeof(JurassicParkConnection))]
    [Migration("20230510153719_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("jp_backend.Database.Entities.Dinosaur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClassificationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("DiscoveryYear")
                        .HasColumnType("integer");

                    b.Property<List<string>>("DnaString")
                        .HasColumnType("text[]");

                    b.Property<string>("EatingPattern")
                        .HasColumnType("text");

                    b.Property<int>("HeightInCentimeter")
                        .HasColumnType("integer");

                    b.Property<int>("LengthInCentimeter")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LocalityOfDiscoveryId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModeOfLocomotion")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ThumbnailId")
                        .HasColumnType("uuid");

                    b.Property<string>("VersionNumber")
                        .HasColumnType("text");

                    b.Property<double>("WeightInKilogram")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("LocalityOfDiscoveryId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ThumbnailId");

                    b.ToTable("Dinosaurs");
                });

            modelBuilder.Entity("jp_backend.Database.Entities.DinosaurClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("DiscoveryYear")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DinosaurClasses");
                });

            modelBuilder.Entity("jp_backend.Database.Entities.DinosaurHabitat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("SizeInSquareKilometers")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Habitats");
                });

            modelBuilder.Entity("jp_backend.Database.Entities.DinosaurLocality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ThumbnailId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ThumbnailId");

                    b.ToTable("DinosaurLocalities");
                });

            modelBuilder.Entity("jp_backend.Database.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DinosaurHabitatId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int?>("SkillLevel")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ThumbnailId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DinosaurHabitatId");

                    b.HasIndex("ThumbnailId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("jp_backend.Database.Entities.FileReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("MimeType")
                        .HasColumnType("text");

                    b.Property<Guid?>("OnDinosaur")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OnEmployee")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OnLocality")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("FileReferences");
                });

            modelBuilder.Entity("jp_backend.Database.Entities.ParkAnimal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AnimalNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("DinosaurTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("HabitatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DinosaurTypeId");

                    b.HasIndex("HabitatId");

                    b.ToTable("ParkAnimals");
                });

            modelBuilder.Entity("jp_backend.Database.Entities.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AgeEndInMillions")
                        .HasColumnType("double precision");

                    b.Property<double>("AgeStartInMillions")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("jp_backend.Database.Entities.Dinosaur", b =>
                {
                    b.HasOne("jp_backend.Database.Entities.DinosaurClass", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId");

                    b.HasOne("jp_backend.Database.Entities.DinosaurLocality", "LocalityOfDiscovery")
                        .WithMany()
                        .HasForeignKey("LocalityOfDiscoveryId");

                    b.HasOne("jp_backend.Database.Entities.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId");

                    b.HasOne("jp_backend.Database.Entities.FileReference", "Thumbnail")
                        .WithMany()
                        .HasForeignKey("ThumbnailId");

                    b.Navigation("Classification");

                    b.Navigation("LocalityOfDiscovery");

                    b.Navigation("Period");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("jp_backend.Database.Entities.DinosaurLocality", b =>
                {
                    b.HasOne("jp_backend.Database.Entities.FileReference", "Thumbnail")
                        .WithMany()
                        .HasForeignKey("ThumbnailId");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("jp_backend.Database.Entities.Employee", b =>
                {
                    b.HasOne("jp_backend.Database.Entities.DinosaurHabitat", null)
                        .WithMany("Employees")
                        .HasForeignKey("DinosaurHabitatId");

                    b.HasOne("jp_backend.Database.Entities.FileReference", "Thumbnail")
                        .WithMany()
                        .HasForeignKey("ThumbnailId");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("jp_backend.Database.Entities.ParkAnimal", b =>
                {
                    b.HasOne("jp_backend.Database.Entities.Dinosaur", "DinosaurType")
                        .WithMany()
                        .HasForeignKey("DinosaurTypeId");

                    b.HasOne("jp_backend.Database.Entities.DinosaurHabitat", "Habitat")
                        .WithMany()
                        .HasForeignKey("HabitatId");

                    b.Navigation("DinosaurType");

                    b.Navigation("Habitat");
                });

            modelBuilder.Entity("jp_backend.Database.Entities.DinosaurHabitat", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
